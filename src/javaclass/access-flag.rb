require "javaclass/util"

module JavaClass

  #
  #===クラスのアクセスフラグの基底クラス。
  #
  class AccessFlag
    include JavaClass::Util

    def initialize( flag )
      @flag = flag
    end
    def on?(flag)
      @flag & flag > 0
    end
    def on(flag)
      @flag |= flag
    end
    def off(flag)
      @flag &= ~flag
    end
    def to_bytes()
      to_byte( @flag, 2 )
    end
  end

  #
  #===クラスのアクセスフラグ
  #
  class ClassAccessFlag < AccessFlag

    # Declared public; may be accessed from outside its package.
    ACC_PUBLIC     = 0x0001
    # Declared final; no subclasses allowed.
    ACC_FINAL      = 0x0010
    # Treat superclass methods specially when invoked by the invokespecial instruction.
    ACC_SUPER      = 0x0020 # 旧コンパイラが出力する値らしい。
    # Is an interface, not a class.
    ACC_INTERFACE  = 0x0200
    # Declared abstract; must not be instantiated.
    ACC_ABSTRACT   = 0x0400
    # Declared synthetic; Not present in the source code.
    ACC_SYNTHETIC  = 0x1000 # ソースには出てこない。コンパイラが付加する場合があるとのこと。
    # Declared as an annotation type.
    ACC_ANNOTATION = 0x2000
    # Declared as an enum type.
    ACC_ENUM       = 0x4000

    #
    #===ソースコードに登場するモディファイアを配列で取得する。
    #
    #<b>戻り値</b>::ソースコードに登場するモディファイアの配列
    #
    def source_modifiers
      modifiers = []
      modifiers << "final"      if on? ACC_FINAL
      modifiers << "abstract"   if on? ACC_ABSTRACT
      return modifiers
    end

    #
    #===アクセサを文字列で取得する。
    #
    #<b>戻り値</b>::アクセサを示す文字列
    #
    def accessor
      return "public"     if on? ACC_PUBLIC
      return ""
    end

    #
    #===クラスの種別(class or interface or enum ..) を文字列で取得する。
    #
    #<b>戻り値</b>::クラスの種別
    #
    def type
      return "@interface" if on?(ACC_INTERFACE) && on?(ACC_ANNOTATION)
      return "interface"  if on? ACC_INTERFACE
      return "enum"       if on? ACC_ENUM
      return "class"
    end

    def to_s
      list = accessor.length > 0 ? [accessor] : []
      (list + source_modifiers << type).join(" ")
    end
  end

  #
  #===フィールドのアクセスフラグ
  #
  class FieldAccessFlag < AccessFlag
    # Declared public; may be accessed from outside its package.
    ACC_PUBLIC    = 0x0001
    # Declared private; usable only within the defining class.
    ACC_PRIVATE   = 0x0002
    # Declared protected; may be accessed within subclasses.
    ACC_PROTECTED = 0x0004
    # Declared static.
    ACC_STATIC    = 0x0008
    # Declared final; no further assignment after initialization.
    ACC_FINAL     = 0x0010
    # Declared volatile; cannot be cached.
    ACC_VOLATILE  = 0x0040
    # Declared transient; not written or read by a persistent object manager.
    ACC_TRANSIENT = 0x0080
    # Declared synthetic; Not present in the source code.
    ACC_SYNTHETIC  = 0x1000 # ソースには出てこない。コンパイラが付加する場合があるとのこと。
    # Declared as an element of an enum.
    ACC_ENUM       = 0x4000

    #
    #===ソースコードに登場するモディファイアを配列で取得する。
    #
    #<b>戻り値</b>::ソースコードに登場するモディファイアの配列
    #
    def source_modifiers
      modifiers = []
      modifiers << "static"    if on? ACC_STATIC
      modifiers << "final"     if on? ACC_FINAL
      modifiers << "volatile"  if on? ACC_VOLATILE
      modifiers << "transient" if on? ACC_TRANSIENT
      return modifiers
    end

    #
    #===アクセサを文字列で取得する。
    #
    #<b>戻り値</b>::アクセサを示す文字列
    #
    def accessor
      return "public"     if on? ACC_PUBLIC
      return "protected"  if on? ACC_PROTECTED
      return "private"    if on? ACC_PRIVATE
      return ""
    end

    def to_s
      list = accessor.length > 0 ? [accessor] : []
      (list + source_modifiers).join(" ")
    end
  end

  #
  #===メソッドのアクセスフラグ
  #
  class MethodAccessFlag < AccessFlag
    # Declared public; may be accessed from outside its package.
    ACC_PUBLIC       = 0x0001
    # Declared private; accessible only within the defining class.
    ACC_PRIVATE      = 0x0002
    # Declared protected; may be accessed within subclasses.
    ACC_PROTECTED    = 0x0004
    # Declared static.
    ACC_STATIC       = 0x0008
    # Declared final; must not be overridden.
    ACC_FINAL        = 0x0010
    # Declared synchronized; invocation is wrapped in a monitor lock.
    ACC_SYNCHRONIZED = 0x0020
    # A bridge method, generated by the compiler.
    ACC_BRIDGE       = 0x0040
    # Declared with variable number of arguments.
    ACC_VARARGS      = 0x0080
    # Declared native; implemented in a language other than Java.
    ACC_NATIVE       = 0x0100
    # Declared abstract; no implementation is provided.
    ACC_ABSTRACT     = 0x0400
    # Declared strictfp; floating-point mode is FP-strict
    ACC_STRICT       = 0x0800
    # Declared synthetic; Not present in the source code.
    ACC_SYNTHETIC    = 0x1000

    #
    #===ソースコードに登場するモディファイアを配列で取得する。
    #
    #<b>戻り値</b>::ソースコードに登場するモディファイアの配列
    #
    def source_modifiers
      modifiers = []
      modifiers << "static"       if on? ACC_STATIC
      modifiers << "final"        if on? ACC_FINAL
      modifiers << "synchronized" if on? ACC_SYNCHRONIZED
      modifiers << "native"       if on? ACC_NATIVE
      modifiers << "abstract"     if on? ACC_ABSTRACT
      modifiers << "strictfp"     if on? ACC_STRICT
      return modifiers
    end

    #
    #===アクセサを文字列で取得する。
    #
    #<b>戻り値</b>::アクセサを示す文字列
    #
    def accessor
      return "public"     if on? ACC_PUBLIC
      return "protected"  if on? ACC_PROTECTED
      return "private"    if on? ACC_PRIVATE
      return ""
    end

    def to_s
      list = accessor.length > 0 ? [accessor] : []
      (list + source_modifiers).join(" ")
    end
  end

  #
  #===インナークラスのアクセスフラグ
  #
  class InnerClassAccessFlag < AccessFlag

    # Marked or implicitly public in source.
    ACC_PUBLIC     = 0x0001
    # Marked private in source.
    ACC_PRIVATE    = 0x0002
    # Marked protected in source.
    ACC_PROTECTED  = 0x0004
    # Marked or implicitly static in source.
    ACC_STATIC     = 0x0008
    # Marked final in source.
    ACC_FINAL      = 0x0010
    # Was an interface in source.
    ACC_INTERFACE  = 0x0200
    # Marked or implicitly abstract in source.
    ACC_ABSTRACT   = 0x0400
    # Declared synthetic; Not present in the source code.
    ACC_SYNTHETIC  = 0x1000 # ソースには出てこない。コンパイラが付加する場合があるとのこと。
    # Declared as an annotation type.
    ACC_ANNOTATION = 0x2000
    # Declared as an enum type.
    ACC_ENUM       = 0x4000

    #
    #===ソースコードに登場するモディファイアを配列で取得する。
    #
    #<b>戻り値</b>::ソースコードに登場するモディファイアの配列
    #
    def source_modifiers
      modifiers = []
      modifiers << "static"       if on? ACC_STATIC
      modifiers << "final"        if on? ACC_FINAL
      modifiers << "abstract"     if on? ACC_ABSTRACT
      return modifiers
    end

    #
    #===アクセサを文字列で取得する。
    #
    #<b>戻り値</b>::アクセサを示す文字列
    #
    def accessor
      return "public"     if on? ACC_PUBLIC
      return "protected"  if on? ACC_PROTECTED
      return "private"    if on? ACC_PRIVATE
      return ""
    end

    #
    #===クラスの種別(class or interface or enum ..) を文字列で取得する。
    #
    #<b>戻り値</b>::クラスの種別
    #
    def type
      return "@interface" if on?(ACC_INTERFACE) && on?(ACC_ANNOTATION)
      return "interface"  if on? ACC_INTERFACE
      return "enum"       if on? ACC_ENUM
      return "class"
    end

    def to_s
      list = accessor.length > 0 ? [accessor] : []
      (list + source_modifiers << type).join(" ")
    end
  end

end